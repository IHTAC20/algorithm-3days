/*
 * red-black tree -  22-01
 */
package edu.tree;

public class Tree22_01{
	/*
	 # 레드-블랙 트리
	 - 이진 탐색 트리의 일종
	 - 균형잡힌 트리 : 높이가 O(log2n)
	 - SEARCH, INSERT, DELETE 연산을 최악의 경우에도 O(log2n) 시간에 지원
	 - 각 노드는 하나의 키(key), 왼쪽 자식(left), 오른쪽 자식(right), 그리고 부모노드(p)의 주소를 저장
	 - 자식 노드가 존재하지 않을 경우 NIL 노드라고 부르는 특수한 노드가 있다고 가정
	 - 따라서 모든 리프노드는 NIL노드
	 - 루트의 부모도 NIL노드라고 가정
	 - 노드들은 내부노드와 NIL노드로 분류
	 	 
	 # 레드-블랙 트리 : 정의
	 * 다음의 조건을 만족하는 이진탐색트리 :
	 1. 각 노드는 red 혹은 black이고,
	 2. 루트 노드는 black이고,
	 3. 모든 리프 노드는 (즉, NIL노드)는 black이고,
	 4. red노드의 자식노드들은 전부 black이고 (즉, red 노드는 연속되어 등장하지 않고)
	 5. 모든 노드에 대해서 그 노드로부터 자손인 리프노드에 이르는 모든 경로에는 동일한 개수의 black노드가 존재
	 
	 # 레드-블랙 트리의 높이
	 - 노드 x의 높이 h(x)는 자신으로부터 리프노드까지의 가장 긴 경로에 포함된 에지의 개수
	 - 노드 x의 블랙-높이 bh(x)는 x로부터 리프노드까지의 경로상의 블랙노드의 개수 (노드 x자신은 불포함)
	 - 높이가 h인 노드의 블랙-높이는 bh >= h/2임
	 	조건 4에 의해 레드노드는 연속될 수 없으므로 당연
	 - 노드 x를 루트로하는 임의의 부트리는 적어도 2^bh(x)-1개의 내부노드를 포함(수학적귀납법)
	 - n개의 내부노드를 가지는 레드블랙트리의 높이는 2log2(n+1)이하임
	 */
}